
<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>PixelG - Token</title>
<link href="logo.png" rel="icon"/>
<script src="https://cdn.jsdelivr.net/npm/ethers@6.7.0/dist/ethers.umd.min.js"></script>
<script src="https://unpkg.com/@web3modal/standalone@2.6.2"></script>
<style>
    body {
      margin: 0;
      padding: 0;
      font-family: sans-serif;
      background: #000;
      color: #fff;
      text-align: center;
    }
    .scene {
      position: absolute;
      width: 100%;
      height: 100%;
      max-height: 450px;
      background: url('pacman-bg.webp') center center no-repeat;
      background-size: cover;
      animation: move 30s linear infinite;
      opacity: 0.12;
    }
    @keyframes move {
      from { transform: translateX(0); }
      to { transform: translateX(-50%); }
    }
    .content {
      position: relative;
      z-index: 2;
      padding-top: 30px;
    }
    .content img {
      width: 100px;
      height: auto;
    }
    .btn {
      background-color: #e53935;
      color: #fff;
      border: none;
      padding: 0.6rem 1.2rem;
      margin: 0.3rem;
      border-radius: 8px;
      font-weight: bold;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .btn:hover {
      background-color: #ef5350;
    }
    .section {
      background: rgba(0, 0, 0, 0.6);
      padding: 2rem;
      margin: 2rem auto;
      max-width: 800px;
      border-radius: 10px;
    }
    iframe {
      border: none;
      width: 100%;
      max-width: 600px;
      height: 400px;
    }
    footer {
      margin-top: 2rem;
      font-size: 0.9rem;
      color: #aaa;
    }
    .social {
      margin-top: 1rem;
    }
    .social a {
      color: #00ffff;
      margin: 0 10px;
      text-decoration: none;
      font-weight: bold;
    }
    input, button {
      font-size: 1rem;
    }
  </style>
<script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js/dist/web3.min.js"></script></head>
<body>
<div class="scene"></div>
<div class="content">
<img alt="PixelG Logo" src="logo.png"/>
<h1>PixelG Token</h1>
<p>PixelG is a gamer-centric BEP-20 token empowering play-to-earn, funding games &amp; building community.</p>
<button class="btn" onclick="window.open('https://pancakeswap.finance/swap?outputCurrency=0x7C7fdB3013C0786f5C84d51dC05b999AF1759Cd7','_blank')">Buy PXG on PancakeSwap</button>
<button class="btn" onclick="window.open('https://bscscan.com/address/0x7C7fdB3013C0786f5C84d51dC05b999AF1759Cd7','_blank')">View on BscScan</button>
<button class="btn" onclick="window.open('https://x.com/PixelGcoin','_blank')">Follow on Twitter</button>
</div>
<div class="section">
<h2>ü™ô PXG Direkt kaufen</h2>
<input id="bnbAmount" placeholder="z.‚ÄØB. 0.01" style="width: 60%; padding: 10px; font-size: 1rem; border-radius: 6px; border: 1px solid #888; background-color: #111; color: #fff;" type="number"/>
<p id="pxgEstimate">Du erh√§ltst: 0 PXG</p>
<div style="margin-bottom: 1rem;">
<button onclick="connectWallet()" style="padding: 10px 20px; background: #facc15; color: black; border: none; border-radius: 5px; font-weight: bold; cursor: pointer;">üîó Wallet verbinden</button>
<div id="wallet-address" style="margin-top: 0.5rem; color: white;"></div>
</div>
<button class="btn" onclick="buyPXG()" style="padding: 10px 20px; background: #22c55e; color: white; border: none; border-radius: 5px; font-weight: bold; cursor: pointer;">Jetzt kaufen</button>
<p id="buyStatus"></p>
</div>
<div class="section">
<h2>üìä PXG Verkaufsstatistik</h2>
<p id="pxgSold">Lade Verkaufsdaten...</p>
<p id="buyerCount">Lade K√§uferanzahl...</p>
</div>
<footer>
<div class="social">
<a href="https://bscscan.com/address/0x7C7fdB3013C0786f5C84d51dC05b999AF1759Cd7" target="_blank">View on BSCScan</a> |
      <a href="https://x.com/PixelGcoin" target="_blank">Twitter</a>
</div>
<p>Contract: 0x7C7fdB3013C0786f5C84d51dC05b999AF1759Cd7</p>
<div style="display: flex; justify-content: center; gap: 30px; margin-top: 30px; flex-wrap: wrap;"><div style="text-align: center; color: white;"><img src="https://api.qrserver.com/v1/create-qr-code/?size=100x100&amp;data=https://www.instagram.com/pixelgcoin?igsh=aHdmNGZiY24wc3Z2" style="width: 100px; height: 100px;"/><div>Instagram</div></div><div style="text-align: center; color: white;"><img src="https://api.qrserver.com/v1/create-qr-code/?size=100x100&amp;data=https://x.com/PixelGcoin?t=L5fqahOGLo38nLfJhNNpkg&amp;s=09" style="width: 100px; height: 100px;"/><div>Twitter</div></div><div style="text-align: center; color: white;"><img src="https://api.qrserver.com/v1/create-qr-code/?size=100x100&amp;data=https://t.me/boost?c=2840471178" style="width: 100px; height: 100px;"/><div>Telegram</div></div></div><p>¬© 2025 PixelG Project</p>
</footer>
<script>
const saleContract = '0x47d54489aebdb0e720316f6e9b83e9f5a16fe769';
const saleAbi = [
  'function totalSold() view returns (uint256)'
];
const pricePerTokenWei = 10000000000000;

async function buyPXG() {
  const web3modal = new window.Web3Modal.default({ projectId: 'abc1234567890defabcdef1234567890' });
  const instance = await web3modal.connect();
  const provider = new ethers.BrowserProvider(instance);
  const signer = await provider.getSigner();
  const amount = document.getElementById('bnbAmount').value;

  try {
    document.getElementById('buyStatus').innerText = 'Transaktion wird gesendet...';
    const tx = await signer.sendTransaction({
      to: saleContract,
      value: ethers.parseEther(amount)
    });
    await tx.wait();
    document.getElementById('buyStatus').innerText = '‚úÖ PXG erfolgreich gekauft!';
  } catch (err) {
    console.error(err);
    document.getElementById('buyStatus').innerText = '‚ùå Fehler beim Kauf.';
  }
}

document.getElementById('bnbAmount').addEventListener('input', (e) => {
  const wei = ethers.parseEther(e.target.value || '0');
  const amount = wei * BigInt(1e18) / BigInt(pricePerTokenWei);
  document.getElementById('pxgEstimate').innerText = `Du erh√§ltst: ${ethers.formatUnits(amount, 18)} PXG`;
});

async function loadTotalSold() {
  const provider = new ethers.JsonRpcProvider('https://bsc-dataseed.binance.org/');
  const contract = new ethers.Contract(saleContract, saleAbi, provider);
  const sold = await contract.totalSold();
  document.getElementById('pxgSold').innerText = `Verkauft: ${ethers.formatUnits(sold, 18)} PXG`;
}

loadTotalSold();
loadBuyerCount();

async function loadBuyerCount() {
  const buyerAbi = ['function getBuyerList() view returns (address[])'];
  const provider = new ethers.JsonRpcProvider('https://bsc-dataseed.binance.org/');
  const contract = new ethers.Contract(saleContract, buyerAbi, provider);
  const buyers = await contract.getBuyerList();
  document.getElementById('buyerCount').innerText = `üßë‚Äçü§ù‚Äçüßë K√§ufer: ${buyers.length}`;
}

</script>
<section id="whitepaper" style="background:#000; color:#fff; padding:2em; font-size:1rem; font-family:sans-serif; border-radius:1em; margin-top:2em;">
<h2>üìÑ PixelG ($PIXG) ‚Äì Whitepaper</h2>
<p><strong>1. Introduction</strong><br/>
  PixelG is a utility token on the BNB Chain (PancakeSwap) that supports global development of video games and graphical technologies ‚Äì from indie production to high-end PC projects. Through community engagement, Web3 technology, and transparent funding, $PIXG aims to become a driving force for innovation in gaming and tech.</p>
<p><strong>2. Vision</strong><br/>
  We believe in a future where creative developers around the world can access funding, tools, and exposure ‚Äì regardless of location or budget. Blockchain provides a fair and decentralized foundation to build on.</p>
<p><strong>3. Token Utility</strong><br/>
  ‚Äì Funding for game developers (mobile, PC, console)<br/>
  ‚Äì Discounted game purchases on PixelG marketplace<br/>
  ‚Äì Rewards for players, devs, and supporters<br/>
  ‚Äì Community voting on funded projects<br/>
  ‚Äì Future support for hardware and chip development</p>
<p><strong>4. Tokenomics</strong><br/>
  ‚Äì Total Supply: 1,000,000,000 PIXG<br/>
  ‚Äì Allocation:<br/>
    40% Community &amp; Airdrops<br/>
    20% Development &amp; Research<br/>
    15% Partnerships<br/>
    15% Liquidity<br/>
    10% Reserve<br/>
  ‚Äì Contract: 0x7C7fdB3013C0786f5C84d51dC05b999AF1759Cd7<br/>
  ‚Äì Chain: BNB Chain (PancakeSwap)</p>
<p><strong>5. Roadmap</strong><br/>
  Q3 2025: Airdrop &amp; Community Launch<br/>
  Q4 2025: Partnerships with indie studios<br/>
  Q1 2026: Beta launch of PixelG Marketplace<br/>
  Q2 2026: First grants for chip/graphics innovation<br/>
  Q3+ 2026: Full platform rollout</p>
<p><strong>6. Marketplace</strong><br/>
  A key part of PixelG is our upcoming marketplace where users can purchase games at lower prices using $PIXG. Developers earn directly in PIXG, while users get exclusive access, voting power, and possible NFT rewards.</p>
<p><strong>7. Fair Launch</strong><br/>
  PixelG is built slowly and carefully.<br/>
  Max investment: 5 EUR per wallet<br/>
  Only when 10 million tokens are in circulation will we list on active exchanges<br/>
  No pump &amp; dump, just long-term growth</p>
<p><strong>8. Contact</strong><br/>
  Website: <a href="https://pixel-gc.vercel.app">pixel-gc.vercel.app</a><br/>
  Twitter: <a href="https://x.com/PixelGcoin">twitter.com/PixelGcoin</a><br/>
  Instagram: <a href="https://instagram.com/pixelgcoin">instagram.com/pixelgcoin</a><br/>
  Contract: 0x7C7fdB3013C0786f5C84d51dC05b999AF1759Cd7</p>
</section>
<script>
async function buyPXG() {
    if (typeof window.ethereum === 'undefined') {
        alert('MetaMask wird ben√∂tigt!');
        return;
    }
    const web3 = new Web3(window.ethereum);
    await window.ethereum.request({ method: 'eth_requestAccounts' });
    const accounts = await web3.eth.getAccounts();
    const user = accounts[0];

    const contract = new web3.eth.Contract([], "0x47d54489aebdb0e720316f6e9b83e9f5a16fe769");

    try {
        const valueInBNB = prompt("Wie viel BNB m√∂chtest du investieren? z.‚ÄØB. 0.01");
        if (!valueInBNB || isNaN(valueInBNB)) {
            alert("Ung√ºltiger Betrag");
            return;
        }
        await web3.eth.sendTransaction({
            from: user,
            to: "0x47d54489aebdb0e720316f6e9b83e9f5a16fe769",
            value: web3.utils.toWei(valueInBNB, "ether")
        });
        alert("Kauf erfolgreich!");
    } catch (err) {
        console.error(err);
        alert("Kauf fehlgeschlagen.");
    }
}
</script>
<script>
let userAccount = null;

async function connectWallet() {
  if (typeof window.ethereum !== "undefined") {
    try {
      const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
      userAccount = accounts[0];
      document.getElementById("wallet-address").innerText = "Verbunden: " + userAccount.slice(0, 6) + "..." + userAccount.slice(-4);
    } catch (error) {
      alert("Wallet-Verbindung abgelehnt");
    }
  } else {
    alert("MetaMask wird ben√∂tigt!");
  }
}

async function buyPXG() {
  if (!userAccount) {
    alert("Bitte zuerst Wallet verbinden.");
    return;
  }

  const amountInBNB = document.getElementById("bnbAmount").value;
  const contractAddress = "0x47d54489aebdb0e720316f6e9b83e9f5a16fe769";

  if (!amountInBNB || isNaN(amountInBNB) || parseFloat(amountInBNB) <= 0) {
    alert("Bitte g√ºltigen BNB-Betrag eingeben.");
    return;
  }

  const weiAmount = (parseFloat(amountInBNB) * 1e18).toString();

  const transactionParameters = {
    to: contractAddress,
    from: userAccount,
    value: "0x" + parseInt(weiAmount).toString(16),
  };

  try {
    await ethereum.request({
      method: 'eth_sendTransaction',
      params: [transactionParameters],
    });
    alert("Transaktion gesendet!");
  } catch (error) {
    alert("Fehler: " + error.message);
  }
}
</script>
<script>
document.getElementById('bnbAmount').addEventListener('input', function () {
  const bnb = parseFloat(this.value);
  const rate = 0.00001; // 0.00001 BNB pro PXG
  const pxg = !isNaN(bnb) ? bnb / rate : 0;
  document.getElementById('pxgOutput').textContent = Math.floor(pxg).toLocaleString();
});
</script><img alt="Pixel Pacman Ghosts" src="pacman-bg.webp" style="position: fixed; bottom: 40px; right: 40px; width: 120px; height: auto; z-index: 1000; opacity: 0.8; pointer-events: none; transition: transform 0.3s ease;"/>
<script>
async function withdrawBNB() {
  if (typeof window.ethereum !== 'undefined') {
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();
    const userAddress = await signer.getAddress();
    const contractAddress = "0x47d54489aebdb0e720316f6e9b83e9f5a16fe769";
    const contractABI = [
      "function withdrawBNB() external",
      "function owner() view returns (address)"
    ];
    const contract = new ethers.Contract(contractAddress, contractABI, signer);
    const ownerAddress = await contract.owner();

    if (userAddress.toLowerCase() === ownerAddress.toLowerCase()) {
      await contract.withdrawBNB();
      alert("BNB erfolgreich ausgezahlt!");
    } else {
      alert("Nur der Besitzer kann diese Aktion durchf√ºhren.");
    }
  } else {
    alert("MetaMask nicht gefunden.");
  }
}
window.addEventListener('DOMContentLoaded', async () => {
  if (typeof window.ethereum !== 'undefined') {
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();
    try {
      const userAddress = await signer.getAddress();
      const contract = new ethers.Contract("0x47d54489aebdb0e720316f6e9b83e9f5a16fe769", [
        "function owner() view returns (address)"
      ], signer);
      const ownerAddress = await contract.owner();
      if (userAddress.toLowerCase() === ownerAddress.toLowerCase()) {
        const btn = document.createElement("button");
        btn.textContent = "üí∞ BNB auszahlen";
        btn.onclick = withdrawBNB;
        btn.style = "padding:10px 20px;margin-top:10px;background:#222;color:white;border:none;border-radius:6px;cursor:pointer;";
        document.getElementById("buyerStats")?.appendChild(btn);
      }
    } catch (e) {}
  }
});
</script>

</body>
</html>
